// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eticaret.Domain.Database.Context;

#nullable disable

namespace eticaret.Migrations
{
    [DbContext(typeof(CommerceContext))]
    [Migration("20250227075820_RattingAVG")]
    partial class RattingAVG
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eticaret.Domain.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "20d549cd-ddc7-4f88-9102-5db8e516fae3",
                            IsDeleted = false,
                            Name = "Category 1"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "d05ff479-fc75-42a5-a709-2fc0109bf3af",
                            IsDeleted = false,
                            Name = "Category 2"
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "a2c188ea-62c0-46dc-a680-244eb27ddbc6",
                            IsDeleted = false,
                            Name = "Category 3"
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "1f7efc10-62ea-4320-93da-9f9faaa4c000",
                            IsDeleted = false,
                            Name = "Category 4"
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "51044383-4606-41da-a79e-23dc08b81f21",
                            IsDeleted = false,
                            Name = "Category 5"
                        },
                        new
                        {
                            Id = 6,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "2e2c3fba-5a8e-453a-a3ba-b0963c5ed16f",
                            IsDeleted = false,
                            Name = "Category 6"
                        });
                });

            modelBuilder.Entity("eticaret.Domain.Core.Entities.CategoryProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryProduct");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 6
                        });
                });

            modelBuilder.Entity("eticaret.Domain.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RatinAVG")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "75f45653-6483-4ae4-acd9-bab45f5c359d",
                            IsDeleted = false,
                            Name = "Product 1",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "0bb94b8c-538a-4502-af3f-5e06e1a36511",
                            IsDeleted = false,
                            Name = "Product 2",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "7962b9b1-7653-4502-8a9a-09129e6334dc",
                            IsDeleted = false,
                            Name = "Product 3",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "679aa956-9b49-4d3d-bc68-d1d13964bff3",
                            IsDeleted = false,
                            Name = "Product 4",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "2e775b79-c12f-487b-b7fc-4848ce3b2f43",
                            IsDeleted = false,
                            Name = "Product 5",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 6,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "6c359dcb-3843-43e0-8a53-d1ca1cf1ce03",
                            IsDeleted = false,
                            Name = "Product 6",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 7,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "dcf2de4c-46b7-4dee-a8de-8606f284ae8c",
                            IsDeleted = false,
                            Name = "Product 7",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 8,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "6e356d4f-f33c-4d66-8518-e4803091e53b",
                            IsDeleted = false,
                            Name = "Product 8",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 9,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "8e611357-58ed-45f3-98ed-706fd6e0ceec",
                            IsDeleted = false,
                            Name = "Product 9",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 10,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "f7f26eb1-fa27-4015-9f5b-55508a53e729",
                            IsDeleted = false,
                            Name = "Product 10",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 11,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "f91605d1-ba11-40f0-9fb3-33c1020f0e9e",
                            IsDeleted = false,
                            Name = "Product 11",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 12,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "ba8a4e82-356e-4eea-a754-0997b755b23f",
                            IsDeleted = false,
                            Name = "Product 12",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 13,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "eb5074f7-7377-4cad-9a2e-8890cb9286c9",
                            IsDeleted = false,
                            Name = "Product 13",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 14,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "89c1b77e-18a0-4dc8-a485-e09b6311585f",
                            IsDeleted = false,
                            Name = "Product 14",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 15,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "0a3885e8-9f59-48a7-a46b-2cd6178c01a9",
                            IsDeleted = false,
                            Name = "Product 15",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 16,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "74f237b6-5f81-422c-b903-c6ad38d3a83a",
                            IsDeleted = false,
                            Name = "Product 16",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 17,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "af79fb92-cf72-4e02-9d0a-b94ec3487213",
                            IsDeleted = false,
                            Name = "Product 17",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 18,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "3ae442ae-675e-41a9-94a3-ca5ffb516b69",
                            IsDeleted = false,
                            Name = "Product 18",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 19,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "b32ac3e0-186b-4f1c-a161-aaa4606358af",
                            IsDeleted = false,
                            Name = "Product 19",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 20,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "3fdf56d7-2ca1-4cac-8dba-4547f0529efd",
                            IsDeleted = false,
                            Name = "Product 20",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 21,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "78c57da5-aada-4d92-bdf6-f5afc33356e0",
                            IsDeleted = false,
                            Name = "Product 21",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 22,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "f1f65cc5-4a9a-4204-acdc-2f03311431f8",
                            IsDeleted = false,
                            Name = "Product 22",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 23,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "939a5a36-d00d-46bf-8d64-16cc40edff40",
                            IsDeleted = false,
                            Name = "Product 23",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 24,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "f8fdf6f5-2779-41c7-8cbe-8badb8af5a4d",
                            IsDeleted = false,
                            Name = "Product 24",
                            RatinAVG = 0
                        },
                        new
                        {
                            Id = 25,
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "a58d8cf4-64a3-4f52-970b-6bc3927b37af",
                            IsDeleted = false,
                            Name = "Product 25",
                            RatinAVG = 0
                        });
                });

            modelBuilder.Entity("eticaret.Domain.Core.Entities.Ratin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ratin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Rating = 1
                        },
                        new
                        {
                            Id = 2,
                            Rating = 2
                        },
                        new
                        {
                            Id = 3,
                            Rating = 3
                        },
                        new
                        {
                            Id = 4,
                            Rating = 4
                        },
                        new
                        {
                            Id = 5,
                            Rating = 5
                        });
                });

            modelBuilder.Entity("eticaret.Domain.Core.Entities.RatinProduct", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RatinId")
                        .HasColumnType("int");

                    b.HasKey("Id", "UserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RatinId");

                    b.HasIndex("UserId");

                    b.ToTable("RatinProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1,
                            ProductId = 1,
                            RatinId = 1
                        },
                        new
                        {
                            Id = 2,
                            UserId = 1,
                            ProductId = 2,
                            RatinId = 1
                        },
                        new
                        {
                            Id = 3,
                            UserId = 1,
                            ProductId = 3,
                            RatinId = 1
                        },
                        new
                        {
                            Id = 4,
                            UserId = 1,
                            ProductId = 4,
                            RatinId = 1
                        },
                        new
                        {
                            Id = 5,
                            UserId = 1,
                            ProductId = 5,
                            RatinId = 1
                        });
                });

            modelBuilder.Entity("eticaret.Domain.Entities.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "924B836D-B087-4D37-A52D-210ABD72CD96",
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "46D16588-9420-4F85-A768-D21419075284",
                            IsDeleted = false,
                            Name = "superuser",
                            NormalizedName = "SUPERUSER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "232D9C58-01CE-466A-90D0-EB7039C75465",
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Flag = "70449BCD-A6DC-4601-867E-35AD80657B28",
                            IsDeleted = false,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ece0da4c-5a62-4f75-8916-e41626cdd023",
                            CreateBy = "Sistem",
                            CreateDate = "27.02.2025 10:58:19",
                            Email = "stoy@windowslive.com",
                            EmailConfirmed = false,
                            Flag = "D90E65E6-9611-4B5F-9F24-BBD468398D51",
                            IsDeleted = false,
                            IsLocked = false,
                            LockoutEnabled = false,
                            Name = "Serkan",
                            NormalizedEmail = "STOY@WINDOWSLIVE.COM",
                            NormalizedUserName = "STOY",
                            PasswordHash = "AQAAAAIAAYagAAAAEHoxZbBS89mhTTdoIc4wV0QWf0V345xWbxcZTQ0PeXLkwJciPIgG3Ad3T3/zoxRJUg==",
                            PhoneNumber = "0(533) 656 30 95",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63742240-5787-4E6A-8AE2-FE8BA5381630",
                            SurName = "TOY",
                            TC = "28301227926",
                            TwoFactorEnabled = false,
                            UserName = "stoy"
                        });
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eticaret.Domain.Core.Entities.CategoryProduct", b =>
                {
                    b.HasOne("eticaret.Domain.Core.Entities.Category", "Category")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("eticaret.Domain.Core.Entities.Product", "Product")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eticaret.Domain.Core.Entities.RatinProduct", b =>
                {
                    b.HasOne("eticaret.Domain.Core.Entities.Product", "Product")
                        .WithMany("RatinProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eticaret.Domain.Core.Entities.Ratin", "Ratin")
                        .WithMany("RatinProducts")
                        .HasForeignKey("RatinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eticaret.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Ratin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Address", b =>
                {
                    b.HasOne("eticaret.Domain.Entities.Users.User", "User")
                        .WithMany("Address")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.RoleClaim", b =>
                {
                    b.HasOne("eticaret.Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.UserClaim", b =>
                {
                    b.HasOne("eticaret.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.UserLogin", b =>
                {
                    b.HasOne("eticaret.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.UserRole", b =>
                {
                    b.HasOne("eticaret.Domain.Entities.Users.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eticaret.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.UserToken", b =>
                {
                    b.HasOne("eticaret.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eticaret.Domain.Core.Entities.Category", b =>
                {
                    b.Navigation("CategoryProducts");
                });

            modelBuilder.Entity("eticaret.Domain.Core.Entities.Product", b =>
                {
                    b.Navigation("CategoryProducts");

                    b.Navigation("RatinProducts");
                });

            modelBuilder.Entity("eticaret.Domain.Core.Entities.Ratin", b =>
                {
                    b.Navigation("RatinProducts");
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("eticaret.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
