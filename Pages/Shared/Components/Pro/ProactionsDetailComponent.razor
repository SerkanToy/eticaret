@inject AuthenticationStateProvider AuthenticationStateProvider
@inject eticaret.Domain.UnitOfWork.IUnitofWork unitofWork
@inject NavigationManager _navigationManager

<div class="bb-single-qty">

    <ul class="bb-pro-actions">
        <li class="bb-btn-group">
            <a href="javascript:void(0);" @onclick="(async () => await Minus())" style="font-size:12px;color:black;border:0px;background-color:white;">
				<i class="ri-subtract-fill" style="color:#686e7d;background-color:white;"></i>
            </a>
        </li>
		<li class="bb-btn-group" style="padding:0px;">
            <a href="javascript:void(0);" style="font-size:12px;color:black;border:0px;background-color:white;">
                @Count
            </a>
        </li>
        <li class="bb-btn-group">
            <a href="javascript:void(0);" @onclick="(async () => await Plus())" style="font-size:12px;color:black;border:0px;background-color:white;">
				<i class="ri-add-fill" style="color:#686e7d;background-color:white;"></i>
            </a>
        </li>
    </ul>
    <div class="buttons">
        <a href="javascript:void(0)" class="bb-btn-2" @onclick="BasketAdd">Sepete Ekle</a>
    </div>
    <ul class="bb-pro-actions">
        <li class="bb-btn-group">
            <a href="javascript:void(0)" @onclick="Favorite">
                @if (IsBoolean)
                {
                    <i class="ri-check-double-line"></i>
                }
                else
                {
                    <i class="ri-heart-line"></i>
                }
            </a>
        </li>
        <li class="bb-btn-group">
            <a href="@Flag" data-link-action="quickview" title="Quick view" data-bs-toggle="modal"
               data-bs-target="#bry_quickview_modal">
                <i class="ri-eye-line"></i>
            </a>
        </li>
    </ul>
</div>

@code {
    [Parameter]
    public string Flag { get; set; } = string.Empty;
    [Parameter]
    public bool IsBoolean { get; set; } = false;
    [Parameter]
    public bool IsBooleanBasket { get; set; } = false;
    [Parameter]
    public int Count { get; set; } = 1;


    private AuthenticationState authenticationState;

    protected override async Task OnInitializedAsync()
    {
        /*authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var id = unitofWork.GetUserById(user.Identity.Name);
            Console.WriteLine($"Kullanıcı {id} giriş yaptı.");
            }
        else
        {
            // Kullanıcı giriş yapmamış
            Console.WriteLine("Kullanıcı giriş yapmadı.");
            }*/
    }

    public async Task Favorite()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity?.IsAuthenticated == true)
        {            
            var userId = unitofWork.GetUserById(user.Identity!.Name!);
            var product = await unitofWork.GetRepository<Product>().GetFindAsync(x => x.Flag == Flag);
            var favorite = await unitofWork.GetRepository<Favorites>().GetFindAsync(x => x.UserId == userId && x.ProductId == product.Id);
            if (favorite is not null)
            {                
                IsBoolean = true;
                return;
            }

            unitofWork.GetRepository<Favorites>().Insert(new Favorites
            {
                UserId = userId,
                ProductId = product.Id
            });
            await unitofWork.SaveChangesAsync();
            IsBoolean = true;
        }
        else
        {
            IsBoolean = false;
        }
        _navigationManager.Refresh();
    }

    public async Task BasketAdd()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = unitofWork.GetUserById(user.Identity!.Name!);
            var product = await unitofWork.GetRepository<Product>().GetFindAsync(x => x.Flag == Flag);

            var basket = await unitofWork.GetRepository<Basket>().GetFindAsync(x => x.UserId == userId && x.ProductId == product.Id);
            if (basket is not null)
            {
                basket.Total += 1;
                unitofWork.GetRepository<Basket>().Update(basket);
                await unitofWork.SaveChangesAsync();
                IsBooleanBasket = true;
                return;
            }

            unitofWork.GetRepository<Basket>().Insert(new Basket
            {
                UserId = userId,
                ProductId = product.Id,
                Total = Count
            });
            await unitofWork.SaveChangesAsync();
            IsBooleanBasket = true;
        }
        else
        {
            IsBooleanBasket = false;
        }
        _navigationManager.Refresh();
    }

    public async Task Plus()
    {
		Count += 1;
    }

    public async Task Minus()
    {
		if (Count > 1)
            Count -= 1;
    }
}