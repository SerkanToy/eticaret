@inject AuthenticationStateProvider AuthenticationStateProvider
@inject eticaret.Domain.UnitOfWork.IUnitofWork unitofWork
@inject NavigationManager _navigationManager

<a href="javascript:void(0);" class="bb-btn-2 check-btn" data-aos="fade-up" data-aos-duration="1000"
   data-aos-delay="400" style="width: 5px;padding: 10px;height: 5px;border-radius: 5px;margin-left: 10px;"
   @onclick="(async () => await Plus(Convert.ToInt32(Id)))">+</a>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;
    private AuthenticationState authenticationState;

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task Plus(int a)
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = unitofWork.GetUserById(user.Identity!.Name!);
            Basket update = await unitofWork.GetRepository<Basket>().GetFindAsync(v => v.Id == Convert.ToInt32(Id));
			update.Total += 1;

            unitofWork.GetRepository<Basket>().Update(update);
            unitofWork.SaveChanges();
        }
        _navigationManager.Refresh();
    }
}
